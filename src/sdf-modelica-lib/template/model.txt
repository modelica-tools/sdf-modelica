// Modelica model automatically generated by sdf_modelica from {{ fileName }}
// Model stucture heavily inspired by Modelica.Mechanics.MultiBody.Examples.Systems.RobotR3.Components.MechanicalStructure
model SDF{{ modelName }}
  "Model of the mechanical part of the {{ modelName }} robot"

  parameter Boolean animation=true "= true, if animation shall be enabled";
  parameter SI.Acceleration g=9.81 "Gravity acceleration";

  // Always add a World to the model
  inner Modelica.Mechanics.MultiBody.World world;

  // Position, velocity, acceleration and torques/force variables for each joint
  ## for joint in joints
    {% if joint/type == "revolute" %}
      SI.Angle q_{{ joint/name }} "Joint angle for joint {{ joint/name }}";
      SI.AngularVelocity qd_{{ joint/name }} "Joint speed for joint {{ joint/name }}";
      SI.AngularAcceleration qdd_{{ joint/name }} "Joint acceleration for joint {{ joint/name }}";
      SI.Torque tau_{{ joint/name }} "Joint torque for joint {{ joint/name }}";
    {% endif %}
    {% if joint/type == "prismatic" %}
      SI.Position q_{{ joint/name }} "Joint position for joint {{ joint/name }}";
      SI.Velocity qd_{{ joint/name }} "Joint speed for joint {{ joint/name }}";
      SI.Acceleration qdd_{{ joint/name }} "Joint acceleration for joint {{ joint/name }}";
      SI.Force tau_{{ joint/name }} "Joint force for joint {{ joint/name }}";
    {% endif %}
  ## endfor

  // Interface of the model: the driving flanges for each joint
  {# TODO(traversaro): add annotation with placement #}
  ## for joint in joints
    {% if joint/type == "revolute" %}
      Modelica.Mechanics.Rotational.Interfaces.Flange_a axis_{{ joint/name }};
    {% endif %}
    {% if joint/type == "prismatic" %}
      Modelica.Mechanics.Translational.Interfaces.Flange_a axis_{{ joint/name }};
    {% endif %}
  ## endfor

  // TODO(traversaro) : document this
  inner Modelica.Mechanics.MultiBody.World world(
    g=(g)*Modelica.Math.Vectors.length(
                                  ({0,-1,0})),
    n={0,-1,0},
    animateWorld=false,
    animateGravity=false,
    enableAnimation=animation);

  // Instantiate a Modelica.Mechanics.MultiBody.Joints for each joint
  ## for joint in joints
    {% if joint/type == "revolute" %}
  Modelica.Mechanics.MultiBody.Joints.Revolute {{ joint/name }}(n={{ joint/modelicaAxis }},useAxisFlange=true,
      animation=animation);
    {% endif %}
    {% if joint/type == "prismatic" %}
  Modelica.Mechanics.MultiBody.Joints.Prismatic {{ joint/name }}(n={{ joint/modelicaAxis }},useAxisFlange=true,
      animation=animation);
    {% endif %}
  Modelica.Mechanics.MultiBody.Parts.FixedRotation {{ joint/name }}_fixedRotation(angle = {{ joint/fixedTransformAngle }}, n = {{ joint/fixedTransformAxis }}, r = {{ joint/fixedTransformTrans }}, rotationType = Modelica.Mechanics.MultiBody.Types.RotationTypes.RotationAxis);
  ## endfor

  // Instantiate a Modelica.Mechanics.MultiBody.Parts.Body for each link
  ## for link in links
  Modelica.Mechanics.MultiBody.Parts.Body {{ link/name }}(
    r_CM={{ link/centerOfMass }},
    m={{ link/mass }},
    I_11={{ link/I_11 }},
    I_22={{ link/I_22 }},
    I_33={{ link/I_33 }},
    I_21={{ link/I_21 }},
    I_23={{ link/I_23 }},
    I_31={{ link/I_31 }});
  ## endfor

equation

## for joint in joints
  {% if joint/type == "revolute" %}
    q_{{ joint/name }} = {{ joint/name }}.phi;
    qd_{{ joint/name }} = der(q_{{ joint/name }});
    qdd_{{ joint/name }} = der(qd_{{ joint/name }});
    tau_{{ joint/name }} = {{ joint/name }}.tau;
  {% endif %}
  {% if joint/type == "prismatic" %}
    q_{{ joint/name }} = {{ joint/name }}.s;
    qd_{{ joint/name }} = der(q_{{ joint/name }});
    qdd_{{ joint/name }} = der(qd_{{ joint/name }});
    tau_{{ joint/name }} = {{ joint/name }}.f;
  {% endif %}

  {% if joint/parentLink == "world" %}
  connect({{joint/parentLink}}.frame_b, {{ joint/name}}_fixedRotation.frame_a)
  {% else %}
  connect({{joint/parentLink}}.frame_a, {{ joint/name}}_fixedRotation.frame_a)
  {% endif}
  connect({{ joint/name}}_fixedRotation.frame_b, {{ joint/name}}.frame_a)
  connect({{ joint/name }}.frame_b, {{joint/childLink}}.frame_a)
## endfor


doxygeend SDF{{ modelName }}
